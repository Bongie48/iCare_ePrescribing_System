// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using iCare_ePrescribing_System.Data;

#nullable disable

namespace iCare_ePrescribing_System.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241019010314_AddNullablePatientVitalStatusColumn")]
    partial class AddNullablePatientVitalStatusColumn
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("Identity")
                .HasAnnotation("ProductVersion", "6.0.28")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("iCare_ePrescribing_System.Data.StaffMembers", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConfirmPasswordOne")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HealthCouncilRegistrationNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordOne")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("image")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", "Identity");
                });

            modelBuilder.Entity("iCare_ePrescribing_System.Models.ActiveIngredient", b =>
                {
                    b.Property<int>("ActiveID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ActiveID"), 1L, 1);

                    b.Property<string>("ActiveName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ActiveID");

                    b.ToTable("ActiveIngredients", "Identity");
                });

            modelBuilder.Entity("iCare_ePrescribing_System.Models.AddMedication", b =>
                {
                    b.Property<int>("MedicationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MedicationId"), 1L, 1);

                    b.Property<string>("MedicationName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("ReOrder")
                        .HasColumnType("int");

                    b.Property<string>("ReOrderStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)");

                    b.Property<int>("TrackStatus")
                        .HasColumnType("int");

                    b.Property<int>("dosageID")
                        .HasColumnType("int");

                    b.Property<string>("image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("scheduleID")
                        .HasColumnType("int");

                    b.HasKey("MedicationId");

                    b.HasIndex("dosageID");

                    b.HasIndex("scheduleID");

                    b.ToTable("AddMedication", "Identity");
                });

            modelBuilder.Entity("iCare_ePrescribing_System.Models.AdminMedIngredients", b =>
                {
                    b.Property<int>("AdminIngredientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AdminIngredientId"), 1L, 1);

                    b.Property<int?>("AdminMedIngredientsAdminIngredientId")
                        .HasColumnType("int");

                    b.Property<int>("Medactiveid")
                        .HasColumnType("int");

                    b.Property<double>("Strength")
                        .HasColumnType("float");

                    b.Property<int>("adminmedicineid")
                        .HasColumnType("int");

                    b.HasKey("AdminIngredientId");

                    b.HasIndex("AdminMedIngredientsAdminIngredientId");

                    b.HasIndex("Medactiveid");

                    b.HasIndex("adminmedicineid");

                    b.ToTable("AdminMedIngredients", "Identity");
                });

            modelBuilder.Entity("iCare_ePrescribing_System.Models.Admission", b =>
                {
                    b.Property<int>("AdmisionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AdmisionID"), 1L, 1);

                    b.Property<DateTime>("AdmissionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("AdmissionStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BedID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DischargeTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Height")
                        .HasColumnType("int");

                    b.Property<int>("PatientID")
                        .HasColumnType("int");

                    b.Property<int>("Weight")
                        .HasColumnType("int");

                    b.HasKey("AdmisionID");

                    b.HasIndex("BedID");

                    b.HasIndex("PatientID");

                    b.ToTable("Admission", "Identity");
                });

            modelBuilder.Entity("iCare_ePrescribing_System.Models.Allergies", b =>
                {
                    b.Property<int>("AllegyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AllegyId"), 1L, 1);

                    b.Property<int>("ActiveID")
                        .HasColumnType("int");

                    b.Property<int>("ActiveIngredientActiveID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.HasKey("AllegyId");

                    b.HasIndex("ActiveIngredientActiveID");

                    b.HasIndex("PatientId");

                    b.ToTable("Allergies", "Identity");
                });

            modelBuilder.Entity("iCare_ePrescribing_System.Models.Anaesthesiologist", b =>
                {
                    b.Property<int>("AnaesthesiologistID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AnaesthesiologistID"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AnaesthesiologistID");

                    b.ToTable("Anaesthesiologists", "Identity");
                });

            modelBuilder.Entity("iCare_ePrescribing_System.Models.Bed", b =>
                {
                    b.Property<int>("BedID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BedID"), 1L, 1);

                    b.Property<int>("BedNo")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("WardID")
                        .HasColumnType("int");

                    b.HasKey("BedID");

                    b.HasIndex("WardID");

                    b.ToTable("Bed", "Identity");
                });

            modelBuilder.Entity("iCare_ePrescribing_System.Models.BookSurgery", b =>
                {
                    b.Property<int>("SurgeryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SurgeryId"), 1L, 1);

                    b.Property<int?>("AnaesthesiologistId")
                        .HasColumnType("int");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<string>("Session")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SurgeonID")
                        .HasColumnType("int");

                    b.Property<DateTime>("SurgeryDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("TheatreId")
                        .HasColumnType("int");

                    b.Property<string>("TreatmentCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SurgeryId");

                    b.HasIndex("AnaesthesiologistId");

                    b.HasIndex("PatientId");

                    b.HasIndex("SurgeonID");

                    b.HasIndex("TheatreId");

                    b.ToTable("Surgeries", "Identity");
                });

            modelBuilder.Entity("iCare_ePrescribing_System.Models.City", b =>
                {
                    b.Property<int>("CityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CityId"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProvinceId")
                        .HasColumnType("int");

                    b.HasKey("CityId");

                    b.HasIndex("ProvinceId");

                    b.ToTable("City", "Identity");
                });

            modelBuilder.Entity("iCare_ePrescribing_System.Models.Condition", b =>
                {
                    b.Property<int>("ConditionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ConditionID"), 1L, 1);

                    b.Property<string>("ConditionCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConditionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ConditionID");

                    b.ToTable("Condition", "Identity");
                });

            modelBuilder.Entity("iCare_ePrescribing_System.Models.DayHospital", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PurchaseManagerEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("DayHospitals", "Identity");
                });

            modelBuilder.Entity("iCare_ePrescribing_System.Models.DosageForm", b =>
                {
                    b.Property<int>("DosageID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DosageID"), 1L, 1);

                    b.Property<string>("DosageName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DosageID");

                    b.ToTable("DosageForm", "Identity");
                });

            modelBuilder.Entity("iCare_ePrescribing_System.Models.MedContra", b =>
                {
                    b.Property<int>("MedInterationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MedInterationID"), 1L, 1);

                    b.Property<int>("CurrentActiveID")
                        .HasColumnType("int");

                    b.Property<int>("InteratingActiveID")
                        .HasColumnType("int");

                    b.HasKey("MedInterationID");

                    b.HasIndex("CurrentActiveID");

                    b.HasIndex("InteratingActiveID");

                    b.ToTable("MedContra", "Identity");
                });

            modelBuilder.Entity("iCare_ePrescribing_System.Models.Medication", b =>
                {
                    b.Property<int>("MedicationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MedicationId"), 1L, 1);

                    b.Property<string>("MedicationName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PatientId")
                        .HasColumnType("int");

                    b.Property<int>("dosageID")
                        .HasColumnType("int");

                    b.Property<int>("scheduleID")
                        .HasColumnType("int");

                    b.HasKey("MedicationId");

                    b.HasIndex("PatientId");

                    b.HasIndex("dosageID");

                    b.HasIndex("scheduleID");

                    b.ToTable("Medications", "Identity");
                });

            modelBuilder.Entity("iCare_ePrescribing_System.Models.MedicationIngredient", b =>
                {
                    b.Property<int>("MedIngredientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MedIngredientId"), 1L, 1);

                    b.Property<int?>("MedicationIngredientMedIngredientId")
                        .HasColumnType("int");

                    b.Property<double>("Strength")
                        .HasColumnType("float");

                    b.Property<int>("activeid")
                        .HasColumnType("int");

                    b.Property<int>("medicineid")
                        .HasColumnType("int");

                    b.HasKey("MedIngredientId");

                    b.HasIndex("MedicationIngredientMedIngredientId");

                    b.HasIndex("activeid");

                    b.HasIndex("medicineid");

                    b.ToTable("MedicationIngredients", "Identity");
                });

            modelBuilder.Entity("iCare_ePrescribing_System.Models.MedicationOrder", b =>
                {
                    b.Property<int>("OrderID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderID"), 1L, 1);

                    b.Property<int>("CurrentQuantity")
                        .HasColumnType("int");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("OrderQuantity")
                        .HasColumnType("int");

                    b.Property<string>("OrderStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StockID")
                        .HasColumnType("int");

                    b.Property<int?>("UserStockStockID")
                        .HasColumnType("int");

                    b.Property<int>("medicineid")
                        .HasColumnType("int");

                    b.HasKey("OrderID");

                    b.HasIndex("StockID");

                    b.HasIndex("UserStockStockID");

                    b.HasIndex("medicineid");

                    b.ToTable("MedicationOrders", "Identity");
                });

            modelBuilder.Entity("iCare_ePrescribing_System.Models.MedInteraction", b =>
                {
                    b.Property<int>("MedInteractionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MedInteractionID"), 1L, 1);

                    b.Property<int>("InteractionActiveID")
                        .HasColumnType("int");

                    b.Property<int>("MedicalConditionID")
                        .HasColumnType("int");

                    b.HasKey("MedInteractionID");

                    b.HasIndex("InteractionActiveID");

                    b.HasIndex("MedicalConditionID");

                    b.ToTable("MedInteraction", "Identity");
                });

            modelBuilder.Entity("iCare_ePrescribing_System.Models.Patient", b =>
                {
                    b.Property<int>("PatientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PatientId"), 1L, 1);

                    b.Property<string>("ContactNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HomeAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IDNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SuburbId")
                        .HasColumnType("int");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PatientId");

                    b.HasIndex("SuburbId");

                    b.ToTable("Patients", "Identity");
                });

            modelBuilder.Entity("iCare_ePrescribing_System.Models.PatientConditions", b =>
                {
                    b.Property<int>("PatientConditionsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PatientConditionsId"), 1L, 1);

                    b.Property<int>("ConditionID")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.HasKey("PatientConditionsId");

                    b.HasIndex("ConditionID");

                    b.HasIndex("PatientId");

                    b.ToTable("PatientConditions", "Identity");
                });

            modelBuilder.Entity("iCare_ePrescribing_System.Models.PatientMedication", b =>
                {
                    b.Property<int>("PatientMedicationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PatientMedicationId"), 1L, 1);

                    b.Property<string>("InTakeInstructions")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MedicationId")
                        .HasColumnType("int");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("PatientMedicationId");

                    b.HasIndex("MedicationId");

                    b.HasIndex("PatientId");

                    b.ToTable("PatientMedication", "Identity");
                });

            modelBuilder.Entity("iCare_ePrescribing_System.Models.PatientVitals", b =>
                {
                    b.Property<int>("PatientVitalsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PatientVitalsId"), 1L, 1);

                    b.Property<int>("AdmisionID")
                        .HasColumnType("int");

                    b.Property<int>("AdmissionAdmisionID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CaptureTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("PatientId")
                        .HasColumnType("int");

                    b.Property<string>("Readings")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VitalId")
                        .HasColumnType("int");

                    b.Property<int>("VitalsVitalId")
                        .HasColumnType("int");

                    b.HasKey("PatientVitalsId");

                    b.HasIndex("AdmissionAdmisionID");

                    b.HasIndex("PatientId");

                    b.HasIndex("VitalsVitalId");

                    b.ToTable("PatientVitals", "Identity");
                });

            modelBuilder.Entity("iCare_ePrescribing_System.Models.Prescription", b =>
                {
                    b.Property<int>("PrescriptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PrescriptionId"), 1L, 1);

                    b.Property<DateTime>("DateIssued")
                        .HasColumnType("datetime2");

                    b.Property<int>("MemberId")
                        .HasColumnType("int");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<string>("TrackStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UrgentStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)");

                    b.HasKey("PrescriptionId");

                    b.HasIndex("MemberId");

                    b.HasIndex("PatientId");

                    b.ToTable("Prescriptions", "Identity");
                });

            modelBuilder.Entity("iCare_ePrescribing_System.Models.PrescriptionItem", b =>
                {
                    b.Property<int>("itemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("itemId"), 1L, 1);

                    b.Property<int>("MedID")
                        .HasColumnType("int");

                    b.Property<int>("PresID")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("instruction")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("itemId");

                    b.HasIndex("MedID");

                    b.HasIndex("PresID");

                    b.ToTable("PrescriptionItem", "Identity");
                });

            modelBuilder.Entity("iCare_ePrescribing_System.Models.Province", b =>
                {
                    b.Property<int>("ProvinceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProvinceId"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProvinceId");

                    b.ToTable("Province", "Identity");
                });

            modelBuilder.Entity("iCare_ePrescribing_System.Models.ReceivedStock", b =>
                {
                    b.Property<int>("ReceivedID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReceivedID"), 1L, 1);

                    b.Property<int>("CurrentQuantity")
                        .HasColumnType("int");

                    b.Property<int>("MedicationID")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReceivedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ReceivedQuantity")
                        .HasColumnType("int");

                    b.Property<string>("ReceivedStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ReceivedID");

                    b.HasIndex("MedicationID");

                    b.ToTable("ReceivedStock", "Identity");
                });

            modelBuilder.Entity("iCare_ePrescribing_System.Models.RegisteredStaff", b =>
                {
                    b.Property<int>("StaffId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StaffId"), 1L, 1);

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HealthCouncilRegistrationNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("roletext")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StaffId");

                    b.ToTable("Staff", "Identity");
                });

            modelBuilder.Entity("iCare_ePrescribing_System.Models.RejectPrescription", b =>
                {
                    b.Property<int>("RejectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RejectId"), 1L, 1);

                    b.Property<DateTime>("RejectDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("RejectReason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RejectedPresID")
                        .HasColumnType("int");

                    b.HasKey("RejectId");

                    b.HasIndex("RejectedPresID");

                    b.ToTable("RejectPrescription", "Identity");
                });

            modelBuilder.Entity("iCare_ePrescribing_System.Models.Schedule", b =>
                {
                    b.Property<int>("ScheduleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ScheduleId"), 1L, 1);

                    b.Property<int>("ScheduleName")
                        .HasColumnType("int");

                    b.HasKey("ScheduleId");

                    b.ToTable("Schedule", "Identity");
                });

            modelBuilder.Entity("iCare_ePrescribing_System.Models.Suburb", b =>
                {
                    b.Property<int>("SuburbId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SuburbId"), 1L, 1);

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SuburbId");

                    b.HasIndex("CityId");

                    b.ToTable("Suburb", "Identity");
                });

            modelBuilder.Entity("iCare_ePrescribing_System.Models.Surgeon", b =>
                {
                    b.Property<int>("SurgeonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SurgeonId"), 1L, 1);

                    b.Property<string>("ContactNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HealthCounsilRegistrationNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Specialization")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SurgeonId");

                    b.ToTable("Surgeon", "Identity");
                });

            modelBuilder.Entity("iCare_ePrescribing_System.Models.TestingDB", b =>
                {
                    b.Property<int>("TestID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TestID"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TestID");

                    b.ToTable("TestingDB", "Identity");
                });

            modelBuilder.Entity("iCare_ePrescribing_System.Models.Theatre", b =>
                {
                    b.Property<int>("TheatreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TheatreId"), 1L, 1);

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TheatreName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TheatreId");

                    b.ToTable("Theatres", "Identity");
                });

            modelBuilder.Entity("iCare_ePrescribing_System.Models.TreatmentCode", b =>
                {
                    b.Property<int>("TreatmentCodeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TreatmentCodeId"), 1L, 1);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TreatmentCodeId");

                    b.ToTable("TreatmentCodes", "Identity");
                });

            modelBuilder.Entity("iCare_ePrescribing_System.Models.UserStock", b =>
                {
                    b.Property<int>("StockID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StockID"), 1L, 1);

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StockID");

                    b.ToTable("UserStocks", "Identity");
                });

            modelBuilder.Entity("iCare_ePrescribing_System.Models.Vitals", b =>
                {
                    b.Property<int>("VitalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VitalId"), 1L, 1);

                    b.Property<double>("Highlimit")
                        .HasColumnType("float");

                    b.Property<double>("Lowlimit")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VitalId");

                    b.ToTable("Vitals", "Identity");
                });

            modelBuilder.Entity("iCare_ePrescribing_System.Models.Ward", b =>
                {
                    b.Property<int>("WardID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WardID"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NoOfBeds")
                        .HasColumnType("int");

                    b.HasKey("WardID");

                    b.ToTable("Wards", "Identity");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", "Identity");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", "Identity");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", "Identity");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", "Identity");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", "Identity");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", "Identity");
                });

            modelBuilder.Entity("iCare_ePrescribing_System.Models.AddMedication", b =>
                {
                    b.HasOne("iCare_ePrescribing_System.Models.DosageForm", "DosageForm")
                        .WithMany()
                        .HasForeignKey("dosageID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("iCare_ePrescribing_System.Models.Schedule", "Schedule")
                        .WithMany()
                        .HasForeignKey("scheduleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DosageForm");

                    b.Navigation("Schedule");
                });

            modelBuilder.Entity("iCare_ePrescribing_System.Models.AdminMedIngredients", b =>
                {
                    b.HasOne("iCare_ePrescribing_System.Models.AdminMedIngredients", null)
                        .WithMany("currentMedicationActive")
                        .HasForeignKey("AdminMedIngredientsAdminIngredientId");

                    b.HasOne("iCare_ePrescribing_System.Models.ActiveIngredient", "ActiveIngredient")
                        .WithMany()
                        .HasForeignKey("Medactiveid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("iCare_ePrescribing_System.Models.Medication", "Medication")
                        .WithMany()
                        .HasForeignKey("adminmedicineid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ActiveIngredient");

                    b.Navigation("Medication");
                });

            modelBuilder.Entity("iCare_ePrescribing_System.Models.Admission", b =>
                {
                    b.HasOne("iCare_ePrescribing_System.Models.Bed", "Bed")
                        .WithMany()
                        .HasForeignKey("BedID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("iCare_ePrescribing_System.Models.Patient", "Patient")
                        .WithMany("Admission")
                        .HasForeignKey("PatientID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bed");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("iCare_ePrescribing_System.Models.Allergies", b =>
                {
                    b.HasOne("iCare_ePrescribing_System.Models.ActiveIngredient", "ActiveIngredient")
                        .WithMany("Allergies")
                        .HasForeignKey("ActiveIngredientActiveID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("iCare_ePrescribing_System.Models.Patient", "Patient")
                        .WithMany("Allergies")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ActiveIngredient");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("iCare_ePrescribing_System.Models.Bed", b =>
                {
                    b.HasOne("iCare_ePrescribing_System.Models.Ward", "Ward")
                        .WithMany("Beds")
                        .HasForeignKey("WardID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ward");
                });

            modelBuilder.Entity("iCare_ePrescribing_System.Models.BookSurgery", b =>
                {
                    b.HasOne("iCare_ePrescribing_System.Models.Anaesthesiologist", "Anaesthesiologist")
                        .WithMany()
                        .HasForeignKey("AnaesthesiologistId");

                    b.HasOne("iCare_ePrescribing_System.Models.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("iCare_ePrescribing_System.Models.Surgeon", "Surgeon")
                        .WithMany()
                        .HasForeignKey("SurgeonID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("iCare_ePrescribing_System.Models.Theatre", "Theatre")
                        .WithMany()
                        .HasForeignKey("TheatreId");

                    b.Navigation("Anaesthesiologist");

                    b.Navigation("Patient");

                    b.Navigation("Surgeon");

                    b.Navigation("Theatre");
                });

            modelBuilder.Entity("iCare_ePrescribing_System.Models.City", b =>
                {
                    b.HasOne("iCare_ePrescribing_System.Models.Province", "Province")
                        .WithMany("City")
                        .HasForeignKey("ProvinceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Province");
                });

            modelBuilder.Entity("iCare_ePrescribing_System.Models.MedContra", b =>
                {
                    b.HasOne("iCare_ePrescribing_System.Models.ActiveIngredient", "ActiveIngredient")
                        .WithMany()
                        .HasForeignKey("CurrentActiveID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("iCare_ePrescribing_System.Models.ActiveIngredient", "ActiveInteraction")
                        .WithMany()
                        .HasForeignKey("InteratingActiveID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ActiveIngredient");

                    b.Navigation("ActiveInteraction");
                });

            modelBuilder.Entity("iCare_ePrescribing_System.Models.Medication", b =>
                {
                    b.HasOne("iCare_ePrescribing_System.Models.Patient", null)
                        .WithMany("CurrentMedications")
                        .HasForeignKey("PatientId");

                    b.HasOne("iCare_ePrescribing_System.Models.DosageForm", "DosageForm")
                        .WithMany("Medication")
                        .HasForeignKey("dosageID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("iCare_ePrescribing_System.Models.Schedule", "Schedule")
                        .WithMany()
                        .HasForeignKey("scheduleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DosageForm");

                    b.Navigation("Schedule");
                });

            modelBuilder.Entity("iCare_ePrescribing_System.Models.MedicationIngredient", b =>
                {
                    b.HasOne("iCare_ePrescribing_System.Models.MedicationIngredient", null)
                        .WithMany("prescriptionItemsActive")
                        .HasForeignKey("MedicationIngredientMedIngredientId");

                    b.HasOne("iCare_ePrescribing_System.Models.ActiveIngredient", "ActiveIngredient")
                        .WithMany()
                        .HasForeignKey("activeid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("iCare_ePrescribing_System.Models.AddMedication", "AddMedication")
                        .WithMany()
                        .HasForeignKey("medicineid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ActiveIngredient");

                    b.Navigation("AddMedication");
                });

            modelBuilder.Entity("iCare_ePrescribing_System.Models.MedicationOrder", b =>
                {
                    b.HasOne("iCare_ePrescribing_System.Models.DayHospital", "Stock")
                        .WithMany("medicationOrders")
                        .HasForeignKey("StockID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("iCare_ePrescribing_System.Models.UserStock", null)
                        .WithMany("medicationOrders")
                        .HasForeignKey("UserStockStockID");

                    b.HasOne("iCare_ePrescribing_System.Models.AddMedication", "AddMedication")
                        .WithMany()
                        .HasForeignKey("medicineid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AddMedication");

                    b.Navigation("Stock");
                });

            modelBuilder.Entity("iCare_ePrescribing_System.Models.MedInteraction", b =>
                {
                    b.HasOne("iCare_ePrescribing_System.Models.ActiveIngredient", "ActiveIngredient")
                        .WithMany()
                        .HasForeignKey("InteractionActiveID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("iCare_ePrescribing_System.Models.Condition", "Condition")
                        .WithMany()
                        .HasForeignKey("MedicalConditionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ActiveIngredient");

                    b.Navigation("Condition");
                });

            modelBuilder.Entity("iCare_ePrescribing_System.Models.Patient", b =>
                {
                    b.HasOne("iCare_ePrescribing_System.Models.Suburb", "Suburb")
                        .WithMany()
                        .HasForeignKey("SuburbId");

                    b.Navigation("Suburb");
                });

            modelBuilder.Entity("iCare_ePrescribing_System.Models.PatientConditions", b =>
                {
                    b.HasOne("iCare_ePrescribing_System.Models.Condition", "Condition")
                        .WithMany("PatientConditions")
                        .HasForeignKey("ConditionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("iCare_ePrescribing_System.Models.Patient", "Patient")
                        .WithMany("PatientConditions")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Condition");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("iCare_ePrescribing_System.Models.PatientMedication", b =>
                {
                    b.HasOne("iCare_ePrescribing_System.Models.Medication", "Medication")
                        .WithMany("PatientMedication")
                        .HasForeignKey("MedicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("iCare_ePrescribing_System.Models.Patient", "Patient")
                        .WithMany("PatientMedication")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Medication");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("iCare_ePrescribing_System.Models.PatientVitals", b =>
                {
                    b.HasOne("iCare_ePrescribing_System.Models.Admission", "Admission")
                        .WithMany("PatientVitals")
                        .HasForeignKey("AdmissionAdmisionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("iCare_ePrescribing_System.Models.Patient", null)
                        .WithMany("PatientVitals")
                        .HasForeignKey("PatientId");

                    b.HasOne("iCare_ePrescribing_System.Models.Vitals", "Vitals")
                        .WithMany("PatientVitals")
                        .HasForeignKey("VitalsVitalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Admission");

                    b.Navigation("Vitals");
                });

            modelBuilder.Entity("iCare_ePrescribing_System.Models.Prescription", b =>
                {
                    b.HasOne("iCare_ePrescribing_System.Models.RegisteredStaff", "RegisteredStaff")
                        .WithMany()
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("iCare_ePrescribing_System.Models.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");

                    b.Navigation("RegisteredStaff");
                });

            modelBuilder.Entity("iCare_ePrescribing_System.Models.PrescriptionItem", b =>
                {
                    b.HasOne("iCare_ePrescribing_System.Models.AddMedication", "medication")
                        .WithMany()
                        .HasForeignKey("MedID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("iCare_ePrescribing_System.Models.Prescription", "Prescription")
                        .WithMany()
                        .HasForeignKey("PresID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Prescription");

                    b.Navigation("medication");
                });

            modelBuilder.Entity("iCare_ePrescribing_System.Models.ReceivedStock", b =>
                {
                    b.HasOne("iCare_ePrescribing_System.Models.AddMedication", "AddMedication")
                        .WithMany("quantitylist")
                        .HasForeignKey("MedicationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AddMedication");
                });

            modelBuilder.Entity("iCare_ePrescribing_System.Models.RejectPrescription", b =>
                {
                    b.HasOne("iCare_ePrescribing_System.Models.Prescription", "Prescription")
                        .WithMany()
                        .HasForeignKey("RejectedPresID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Prescription");
                });

            modelBuilder.Entity("iCare_ePrescribing_System.Models.Suburb", b =>
                {
                    b.HasOne("iCare_ePrescribing_System.Models.City", "City")
                        .WithMany("Suburb")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("iCare_ePrescribing_System.Data.StaffMembers", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("iCare_ePrescribing_System.Data.StaffMembers", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("iCare_ePrescribing_System.Data.StaffMembers", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("iCare_ePrescribing_System.Data.StaffMembers", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("iCare_ePrescribing_System.Models.ActiveIngredient", b =>
                {
                    b.Navigation("Allergies");
                });

            modelBuilder.Entity("iCare_ePrescribing_System.Models.AddMedication", b =>
                {
                    b.Navigation("quantitylist");
                });

            modelBuilder.Entity("iCare_ePrescribing_System.Models.AdminMedIngredients", b =>
                {
                    b.Navigation("currentMedicationActive");
                });

            modelBuilder.Entity("iCare_ePrescribing_System.Models.Admission", b =>
                {
                    b.Navigation("PatientVitals");
                });

            modelBuilder.Entity("iCare_ePrescribing_System.Models.City", b =>
                {
                    b.Navigation("Suburb");
                });

            modelBuilder.Entity("iCare_ePrescribing_System.Models.Condition", b =>
                {
                    b.Navigation("PatientConditions");
                });

            modelBuilder.Entity("iCare_ePrescribing_System.Models.DayHospital", b =>
                {
                    b.Navigation("medicationOrders");
                });

            modelBuilder.Entity("iCare_ePrescribing_System.Models.DosageForm", b =>
                {
                    b.Navigation("Medication");
                });

            modelBuilder.Entity("iCare_ePrescribing_System.Models.Medication", b =>
                {
                    b.Navigation("PatientMedication");
                });

            modelBuilder.Entity("iCare_ePrescribing_System.Models.MedicationIngredient", b =>
                {
                    b.Navigation("prescriptionItemsActive");
                });

            modelBuilder.Entity("iCare_ePrescribing_System.Models.Patient", b =>
                {
                    b.Navigation("Admission");

                    b.Navigation("Allergies");

                    b.Navigation("CurrentMedications");

                    b.Navigation("PatientConditions");

                    b.Navigation("PatientMedication");

                    b.Navigation("PatientVitals");
                });

            modelBuilder.Entity("iCare_ePrescribing_System.Models.Province", b =>
                {
                    b.Navigation("City");
                });

            modelBuilder.Entity("iCare_ePrescribing_System.Models.UserStock", b =>
                {
                    b.Navigation("medicationOrders");
                });

            modelBuilder.Entity("iCare_ePrescribing_System.Models.Vitals", b =>
                {
                    b.Navigation("PatientVitals");
                });

            modelBuilder.Entity("iCare_ePrescribing_System.Models.Ward", b =>
                {
                    b.Navigation("Beds");
                });
#pragma warning restore 612, 618
        }
    }
}
